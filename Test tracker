import requests
import json
import time
import random
import threading
from datetime import datetime, timedelta

# Settings class to store shared data
class Settings:
    WebHookFree = "https://discord.com/api/webhooks/1333620957734240327/fHv2EcpZml54_VmML21S-W1r5ULwNKJKketOzk7_J-chkJxfL6DUvwCIo5tWKyJKMLYd"  # Replace with actual webhook URL
    WebHookPro = "https://discord.com/api/webhooks/1333620957734240327/fHv2EcpZml54_VmML21S-W1r5ULwNKJKketOzk7_J-chkJxfL6DUvwCIo5tWKyJKMLYd"  # Replace with actual webhook URL
    PlayFabTitleID = "63FDD"
    sessionTicket = ""
    playFabId = ""
    index = 0
    index2 = 0
    cooldown = 0.0
    cooldown2 = 0.0
    regions = ["US", "USW", "EU"]
    cosmetics = ["LBADE", "LBAGS", "LBAAD", "LBAAK", "LBACP", "LFAAZ", "LBAAZ"]
    roomsPrv = ["DEEP", "JUAN", "MELT", "JMAN", "HUNT", "MODS", "GTAG"]
    roomsPub = []
    dontRemoveCodes = [
        "PBBV", "ECHO", "COMP", "J3VU", "STATUE", "CHIPPD", "UNKNOWN",
        "BANSHEE", "FAADDUU", "JULIAN", "SMILER", "RUN1"
    ]

class GorillaTagTracker:
    def __init__(self):
        self.playFabApiHost = f"https://{Settings.PlayFabTitleID}.playfabapi.com"
        self.lastTitle = ""
        self.lastRoom = ""
        self.removedRooms = {}
        self.login_to_playfab()

    def login_to_playfab(self):
        """Logs in to PlayFab using a session ticket"""
        login_request = {
            "TitleId": Settings.PlayFabTitleID,
            "CreateAccount": True,  # Creates an account if one doesn't exist
            "InfoRequestParameters": {"GetUserAccountInfo": True}
        }

        response = requests.post(f"{self.playFabApiHost}/Client/LoginWithCustomID",
                                 data=json.dumps(login_request),
                                 headers={"Content-Type": "application/json"})

        if response.status_code == 200:
            response_data = response.json()
            Settings.sessionTicket = response_data["data"]["SessionTicket"]
            Settings.playFabId = response_data["data"]["PlayFabId"]
            print(f"‚úÖ Logged into PlayFab! PlayFabID: {Settings.playFabId}")
        else:
            print(f"‚ùå PlayFab login failed: {response.text}")

    def get_shared_group_data(self, groupType):
        """Fetches PlayFab shared group data to track players in rooms."""
        if groupType == "prv":
            if Settings.index >= len(Settings.roomsPrv):
                Settings.index = 0
            room = Settings.roomsPrv[Settings.index]
        else:
            if Settings.index2 >= len(Settings.roomsPub):
                Settings.index2 = 0
            room = Settings.roomsPub[Settings.index2]

        region = random.choice(Settings.regions)
        combined_code = room + region

        request_payload = {"SharedGroupId": combined_code}
        headers = {"X-Authorization": Settings.sessionTicket}

        response = requests.post(f"{self.playFabApiHost}/Client/GetSharedGroupData",
                                 data=json.dumps(request_payload),
                                 headers=headers)

        if response.status_code != 200:
            print(f"‚ö†Ô∏è Failed to get shared group data: {response.status_code}")
            return

        response_json = response.json()
        if "data" in response_json and "Data" in response_json["data"]:
            data_items = response_json["data"]["Data"]
            if not data_items:
                self.remove_room(room)
            else:
                playerList = len(data_items)
                for item in data_items:
                    value = data_items[item]["Value"]
                    self.check_and_send_webhook(value, room, playerList, region)

        self.cycle_room_code(groupType)

    def remove_room(self, room):
        """Removes inactive rooms (except protected ones)."""
        if room not in Settings.dontRemoveCodes:
            print(f"‚ùå Removing inactive room: {room}")
            if room in Settings.roomsPrv:
                Settings.roomsPrv.remove(room)
                self.removedRooms[room] = datetime.utcnow() + timedelta(minutes=2)
            if room in Settings.roomsPub:
                Settings.roomsPub.remove(room)
                self.removedRooms[room] = datetime.utcnow() + timedelta(minutes=2)

    def cycle_room_code(self, groupType):
        """Cycles through room codes to continuously track new players."""
        if groupType == "prv":
            Settings.index = (Settings.index + 1) % len(Settings.roomsPrv)
        else:
            Settings.index2 = (Settings.index2 + 1) % len(Settings.roomsPub)

    def check_and_send_webhook(self, value, room, playerList, region):
        """Checks if a player has a specific cosmetic and sends a webhook."""
        webhooks = [
            ("Player Found - Finger Painter Badge", "https://static.wikia.nocookie.net/gorillatag/images/b/b7/Fingerpaint.png", "pro"),
            ("Player Found - Illustrator Badge", "https://static.wikia.nocookie.net/gorillatag/images/2/22/IllustratorbadgeTransparent.png", "pro"),
            ("Player Found - Administrator Badge", "https://static.wikia.nocookie.net/gorillatag/images/4/40/Adminbadge.png", "pro"),
            ("Player Found - Moderator Stick", "https://static.wikia.nocookie.net/gorillatag/images/a/aa/Stick.png", "pro"),
            ("Player Found - Cold Monke Sweater", "https://static.wikia.nocookie.net/gorillatag/images/9/9d/SweaterWinter23GTSprite.png", "pro"),
            ("Player Found - 2022 Glasses", "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTysnxY8_8v5HAgUhZOMAz6iz9liIXcFxZR-kpO0VXERLP2I9wcMdomy6SHZ1Ir_b-CMIA", "free"),
            ("Player Found - GT1 Badge", "https://static.wikia.nocookie.net/gorillatag/images/8/88/Gt1.png", "free"),
        ]

        for i, cosmetic in enumerate(Settings.cosmetics):
            if cosmetic in value:
                title, thumbnail, tier = webhooks[i]
                self.send_discord_webhook(title, room, playerList, region, thumbnail, tier)

    def send_discord_webhook(self, title, room, playerList, region, thumbnail, tier):
        """Sends a Discord webhook notification when a tracked player is found."""
        if title == self.lastTitle and room == self.lastRoom:
            return

        webhookUrl = Settings.WebHookPro if tier == "pro" else Settings.WebHookFree
        content = f"üéâ Player found: {title}"

        payload = {
            "content": content,
            "embeds": [{
                "title": title,
                "description": f"Room: **{room}**\nPlayers: **{playerList}/10**\nRegion: **{region}**",
                "color": 0xFF0000,
                "thumbnail": {"url": thumbnail}
            }]
        }

        requests.post(webhookUrl, data=json.dumps(payload), headers={"Content-Type": "application/json"})

        self.lastTitle = title
        self.lastRoom = room

    def start_tracking(self):
        """Continuously scans rooms and checks for players."""
        while True:
            self.get_shared_group_data("prv")
            time.sleep(0.45)
            self.get_shared_group_data("pub")
            time.sleep(0.45)

# Start tracking
if __name__ == "__main__":
    tracker = GorillaTagTracker()
    threading.Thread(target=tracker.start_tracking, daemon=True).start()
